from flask import Flask, request
from ApiSequenceGenerator import *
import os
from APK_preprocessing import get_api_call_graph
import categorization
import detection

app = Flask(__name__)

@app.route('/analyze', methods=['POST'])
def analyze_apk():
    apk_file = request.files['apk_file']
    print(apk_file)
    # Salvataggio del file apk sul disco
    apk_file.save('temp.apk')
    # Analisi del file apk con la funzione di analisi
    result = _analysis('temp.apk')
    # Rimozione del file apk temporaneo
    detection = _detect(result)
    if detection == 'Bening APK':
        os.remove('temp.apk')
        print('The APK is BENIGN')
        return detection
    else:
        print('[!!!] The APK is a MALWARE')
        prediction, malware = _categorize(result)
        print(prediction)
        os.remove('temp.apk')
        return malware

def _detect(sequence):
    prediction, category = detection.detect(sequence)
    return category

def _categorize(sequence):
    prediction, malware = categorization.categorize(sequence)
    return prediction, malware

def _analysis(apk_file):
    print('[+] Creating API Call Graph ...')
    api_call_graph = get_api_call_graph(apk_file)
    api_seq_generator = ApiSequenceGenerator()
    print('[+] Creating Sequence ...')
    api_sequence = api_seq_generator.preprocess(api_call_graph)
    print('This is the API Call Sequence:\n\n' + str(api_sequence[0]) + '\n\n')
    return api_sequence[0]

if __name__ == '__main__':
    app.run(debug=True)
